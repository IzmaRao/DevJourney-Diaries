import { NextRequest, NextResponse } from 'next/server';

const blogs = [
    {id: 1, author: "Izma Ikhlaque" , blogname: "The Journey to Becoming a Full-Stack Developer", description1: "When I embarked on my journey to becoming a full-stack developer, I started with the basics: HTML, CSS, and JavaScript. These foundational technologies were relatively easy to grasp, and I quickly became proficient in them. Moving on to advanced frameworks like Next.jsand Tailwind CSS, I applied my knowledge through project-based learning, creating websites and assignments to solidify my understanding.",  description2: "Throughout this journey, I realized the immense value of self-study and the importance of having mentors for guidance. Tackling errors and bugs required a resilient mindset. Persistence and consistent effort eventually led to breakthroughs, improving my technical skills and problem-solving abilities.", description3: "Collaboration with other developers became a significant part of my growth. Working on team projects taught me effective communication, version control with Git, and code review. Staying updated with industry trends and continuously learning new technologies helped me build a well-rounded portfolio, reflecting my journey from a novice to a full-stack developer.", image: "/image.png"},
    {id: 2, author: "Arham Ikhlaque" , blogname: "Exploring New JavaScript Frameworks", description1: "Staying updated with the latest tools is vital for web developers. Recently, I delved into Next.jsand Tailwind CSS. Next.js, built on React, simplifies the development of server-rendered applications. It offers automatic code splitting, server-side rendering, and static site generation, which significantly enhance performance and SEO.",  description2: "Tailwind CSS, on the other hand, adopts a utility-first approach for styling. It provides a set of predefined classes that make styling more efficient and consistent. This framework eliminates the need for writing custom CSS for every component, speeding up the development process. Combining these tools has transformed my workflow. Next.jsmanages complex configurations, allowing me to focus on building features, while Tailwind CSS makes the styling process more intuitive and faster.", description3: "In the ever-evolving landscape of web development, frameworks like Next.jsand Tailwind CSS are invaluable. They not only enhance productivity but also empower developers to build scalable, high-performance applications efficiently. This exploration has been transformative, and I highly recommend these frameworks for modern web development.", image: "/img2.jpg"},
    {id: 3, author: "Arish Ikhlaque" , blogname: "Debugging Tips for Developers", description1: "Debugging is a critical skill for developers. Understanding your codebase thoroughly is crucial before diving into debugging. Familiarizing yourself with the architecture and key components can help identify potential issues more efficiently.",  description2: "Using the right tools can streamline the process. Development environments come equipped with powerful debugging tools like breakpoints and step-by-step execution. Chrome DevTools and Visual Studio Code’s debugger are particularly useful. Implementing logging allows tracking execution flow and monitoring variables.", description3: "Maintaining a resilient mindset is vital. Debugging can be frustrating, but persistence and patience usually lead to breakthroughs. Collaborating with peers or seeking community help can provide new perspectives and solutions. By combining these strategies, developers can enhance their problem-solving skills and streamline the debugging process.", image: "/img3.jpeg"},
    {id: 4, author: "Zimal Ikhlaque" , blogname: "Boost Your Coding Productivity", description1: "Boosting productivity is essential for developers aiming to optimize their workflow. Adopting a powerful code editor like Visual Studio Code can make a significant difference. These editors offer features like syntax highlighting, code completion, and integrated terminal, which streamline the coding process.",  description2: "Utilizing version control systems like Git is another crucial practice. Git helps track changes, manage different code versions, and collaborate efficiently with others. Automation tools like Gulp, Grunt, and Webpack can further enhance productivity by automating repetitive tasks such as code compilation and testing.", description3: "Time management is equally important. Breaking down tasks into smaller, manageable chunks and setting clear goals can help maintain focus and motivation. By implementing these strategies, developers can work more efficiently, reduce errors, and deliver high-quality code consistently.", image: "/img4.jpeg"},
    {id: 5, author: "Elaf Ikhlaque" , blogname: "CSS Grid vs. Flexbox", description1: "Choosing the right layout system is crucial for creating responsive and efficient web designs. CSS Grid and Flexbox are two powerful layout systems that offer unique advantages. CSS Grid provides a two-dimensional grid-based layout system, making it ideal for complex designs with rows and columns. It's perfect for creating intricate layouts and aligning items precisely.",  description2: "Flexbox, on the other hand, is a one-dimensional layout system, best suited for simpler layouts. It excels in distributing space along a single axis, whether horizontally or vertically. Flexbox is particularly useful for aligning items within a container and handling responsive design with ease.", description3: "Understanding the differences and use cases of CSS Grid and Flexbox allows developers to choose the most suitable layout system for their projects, ensuring efficient and visually appealing designs.", image: "/img5.jpeg"},
    {id: 6, author: "Ariba Abbasi" , blogname: "Building Responsive Web Apps", description1: "Creating responsive web applications is crucial in today's multi-device world. By implementing best practices like media queries, flexible grids, and responsive images, developers can ensure their web apps provide a seamless user experience across desktops, tablets, and smartphones. Media queries help apply different styles based on screen sizes, while flexible grids allow layouts to adjust fluidly to various dimensions.",  description2: "Responsive images play a vital role in optimizing load times and visual quality, delivering the appropriate image size based on the device's resolution. Leveraging frameworks like Bootstrap or Tailwind CSS can also simplify the process, offering pre-built components designed for responsiveness.", description3: "By focusing on adaptive layouts, performance optimization, and accessibility, developers can create web apps that look and function well on any device, enhancing the overall user experience.", image: "/img6.avif"},
    {id: 7, author: "Faisal Massod" , blogname: "Introduction to API Integration", description1: "APIs are essential in modern web development, enabling applications to interact with external services and data. Integrating APIs can enhance functionality and improve user experience by accessing real-time information. To get started, developers need to understand API documentation and the specific endpoints available.",  description2: "A step-by-step approach involves setting up HTTP requests, handling responses, and managing errors. Tools like Postman can simplify the testing process. Popular APIs, such as those from Google, Twitter, or weather services, provide valuable data that can be integrated into applications to create dynamic and interactive features", description3: "Mastering API integration allows developers to build robust and versatile applications, leveraging external data and services to deliver a richer user experience. It’s a crucial skill for any developer looking to enhance their web development capabilities", image: "/img7.webp"},
    {id: 8, author: "Okasha Aijaz" , blogname: "From Code to Production: Deployment Strategies", description1: "Deploying web applications from code to production requires careful planning and execution. Understanding various deployment strategies is crucial for ensuring a smooth transition. One common approach is using cloud platforms like AWS, Azure, or Google Cloud, which offer scalable and flexible deployment options. These platforms provide services like server management, database hosting, and CI/CD pipelines.",  description2: "Another strategy involves using containerization tools like Docker, allowing developers to package applications with all their dependencies, ensuring consistency across different environments. Kubernetes can then be used to manage these containers, offering automated deployment, scaling, and management.", description3: "Choosing the right deployment strategy depends on project requirements, budget, and team expertise. By leveraging modern tools and platforms, developers can ensure their applications are deployed efficiently and reliably, providing users with a seamless experience.", image: "/img8.png"}
];

export async function GET(request:NextRequest, context: { params: Promise<{id: string}> }) {
    const { id } = await context.params;
    const blogId = parseInt(id, 10);
    const blog = blogs.find((p) => p.id === blogId)
    return NextResponse.json(blog);
}

